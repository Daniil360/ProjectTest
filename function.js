"use strict";

/*Функции-это наши действия в JS.Они используют различные типы данных
и изменяют информацию так как мы ей укажем.Так же это значительно сокращает 
наш код прям как циклы .Вы можете приставить Функцию как калькулятор .нам
нет нужды каждый раз вводить какие-то математические вычесления мы просто 
вводим какую-то информацию, какие-то данные а калькулятор делает все за вас
Вся структура калькулятора это набор функций(сложения,вычитания,деления,
умножения и тд) Так же можно сказать и про холодильних , микроволновку у 
них есть какой-то набор функций который они выполняют.
Синтаксис- сначала мы прописываем ключевое слово function мы говорим что 
это функция после этого у нас идет название или имя будущей функции
Например showFirstMessage -то есть показать каое-то первое сообщение
после этого мы ставим скобки () и после этого фигурные скобки {} в простые
скобки мы будем передовать аргументы функции также как и в калькуляторе мы 
передаем например 4 и еще одна 4 и мы их складываем вместе .Внутри фугурных
скобок у нас выполняются какие-то действия Например: когда наша функция
будет вызываться она в консоль будет передавать какое-то сообщение Пример
console.log("Hello World!"); И самое главное когда мы создали функцию 
это потом ее использовать ведь сейчас она просто есть для того чтобы она 
заработала нам необходимо ее вызвать то есть = showFirstMessage мы обращаемся
к имени этой функции и ставим круглые скобки и ставим(;)
function showFirstMessage() {
    console.log("Hello World!");
}

showFirstMessage();
*/ 

//Одна из самых главных вещей в функции это ее имя существует негласное правило
//оно должно быть Глаголом с припиской того над чем выполняется действие 
//В данной примере например 
//showFirstMessage=глагол(показать)какие-то(первое)(сообщение) и все 
//это пишется в формате кэмэлКейс
//(Анонимные функции)Так же есть функции анонимные Без имени они вызываются
//и используются 
//прямо здесь и сейчас только один раз поэтому имя им давать впринципе
//не нужно 

/*Аргументы функции - которые мы можем записывать в круглых скобках() 
когда функция вызывается мы можем дать ей какие-то данные когторые она 
будет использовать внутри себя .Опять же преставьте калькулятор то есть
мы как функцию передаем два аргумента 4  + 5 в итоге это функция выдает нам
(9) эти два числа будут аргументами функции 
Пример- аргумент (text) теперь чтобы этот текст этот аргумент мы могли 
использовать в нутри функции в консоль мы прописываем(text)
console.log(text)Теперь для того чтобы функция правильно отработала нам 
этот аргумент необходимо передать вот сюда => showFirstMessage("Hello world");
когда функция запустится она возьмет эту строку которую мы ей передали
подставит вместо аргумента и потом засунет его в команду console.log()
function showFirstMessage(text) {
    console.log(text);
}

showFirstMessage("Hello World");

если вдоваться в детали то в  аргументорв может быть и бесконечное 
количество для того чтобы задать еще один аргумент мы ставим запятую(,)
и записываем еще один аргумент и тд.
Теперь в глубь этой функции первое что нам необходмимо знать это как ведут
себя переменные внутри этой функции Пример
Есть классический вариант, если здесь внутри функции мы создадим переменную
let num мы предпологаем что она будет изменятся которая будет равна 20
let num = 20;
После того как функция вызвана мы попробуем эту переменную достать то есть 
console.log(num);
Если мы обьявляем переменную внутри функции то снаружи она уже недоступна 
Переменные созданые при помощи let и const существуют только внутри блока
функции то есть блока фугурных скобок и здесь это правило работает как 
никогда .Когда такая переменная создана внутри функции она называется 
локальной переменной потому-что она существует только лакально внутри этой
функции .Понятное дело что внутри мы можем с ней как-то взаимодействовать 
выполнять какие-то действия с элементами на странице , с какой-то базой 
данных и тд.Но она существует только внутри функции .Но так же можно 
поступить по другому мы можем создать глобальную переменную вынесев ее за
фигурные скобки пример 

let num = 20; - глобальная переменная 

function showFirstMessage(text) {
    console.log(text);
    let num = 20;  - локальная переменная 
}

showFirstMessage("Hello World");
console.log(num);


Замыкание функции - по простому это сама функция вместе со всеми внешними 
переменными которые ей доступны .

Кроме всех действий функция нам может вернуть какое либо значение при 
помощи ключевого слова 
return- как только функция увидет ключевое слово return она прекратит свое
действие



*/

let num = 20;

function showFirstMessage(text) {
    console.log(text);
    
    console.log(num);
}

showFirstMessage("Hello World");
console.log(num);


function calc(a, b) {
    return (a + b);//скобочки нужны для того чтобы сгрупировать это значение 
//по простому это значит что когда запустится функция calc она вернет сумму
//первого аргумента и второго аргумента и вот эта маленькая функция она 
//уже за нас решает уже многие проблемы потому-что мы ее с вами теперь
// можем переиспользовать много много раз 
//Функции-это один из принципов оптимизации кода 
//После return нельзяне писать код потому что он не будет выполнятся 
//return- также есть еще одно примененение как окончание функции так и 
//возврат значения на ружу 
} 

console.log(calc(4, 3));
console.log(calc(5, 6));
console.log(calc(10, 6));

function ret() {
    let num = 50;
    return num;
}

const anotherNum = ret();
console.log(anotherNum)


/*Классификация функций которая существует */


const logger = function() {
    console.log("Hello")
};

logger()


//Стрелочная функция ее особенности - самое главное это то что такая 
//функция не имеет контекста вызова.Поэтому ее чаще всего можно встретить
//в обработчиках событий.
//Стрелочную функцию везде использовать нельзя

const calc = (a, b) => { 
    console.log('1');
    return a + b;
};

//функция это один из основопологающих кирпичиков из которых состоит 
//любая программа
