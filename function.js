"use strict";

/*Функции-это наши действия в JS.Они используют различные типы данных
и изменяют информацию так как мы ей укажем.Так же это значительно сокращает 
наш код прям как циклы .Вы можете приставить Функцию как калькулятор .нам
нет нужды каждый раз вводить какие-то математические вычесления мы просто 
вводим какую-то информацию, какие-то данные а калькулятор делает все за вас
Вся структура калькулятора это набор функций(сложения,вычитания,деления,
умножения и тд) Так же можно сказать и про холодильних , микроволновку у 
них есть какой-то набор функций который они выполняют.
Синтаксис- сначала мы прописываем ключевое слово function мы говорим что 
это функция после этого у нас идет название или имя будущей функции
Например showFirstMessage -то есть показать каое-то первое сообщение
после этого мы ставим скобки () и после этого фигурные скобки {} в простые
скобки мы будем передовать аргументы функции также как и в калькуляторе мы 
передаем например 4 и еще одна 4 и мы их складываем вместе .Внутри фугурных
скобок у нас выполняются какие-то действия Например: когда наша функция
будет вызываться она в консоль будет передавать какое-то сообщение Пример
console.log("Hello World!"); И самое главное когда мы создали функцию 
это потом ее использовать ведь сейчас она просто есть для того чтобы она 
заработала нам необходимо ее вызвать то есть = showFirstMessage мы обращаемся
к имени этой функции и ставим круглые скобки и ставим(;)
function showFirstMessage() {
    console.log("Hello World!");
}

showFirstMessage();
*/ 

//Одна из самых главных вещей в функции это ее имя существует негласное правило
//оно должно быть Глаголом с припиской того над чем выполняется действие 
//В данной примере например 
//showFirstMessage=глагол(показать)какие-то(первое)(сообщение) и все 
//это пишется в формате кэмэлКейс
//(Анонимные функции)Так же есть функции анонимные Без имени они вызываются
//и используются 
//прямо здесь и сейчас только один раз поэтому имя им давать впринципе
//не нужно 

/*Аргументы функции - которые мы можем записывать в круглых скобках() 
когда функция вызывается мы можем дать ей какие-то данные когторые она 
будет использовать внутри себя .Опять же преставьте калькулятор то есть
мы как функцию передаем два аргумента 4  + 5 в итоге это функция выдает нам
(9) эти два числа будут аргументами функции 
Пример- аргумент (text) теперь чтобы этот текст этот аргумент мы могли 
использовать в нутри функции в консоль мы прописываем(text)
console.log(text)Теперь для того чтобы функция правильно отработала нам 
этот аргумент необходимо передать вот сюда => showFirstMessage("Hello world");
когда функция запустится она возьмет эту строку которую мы ей передали
подставит вместо аргумента и потом засунет его в команду console.log()
function showFirstMessage(text) {
    console.log(text);
}

showFirstMessage("Hello World");

если вдоваться в детали то в  аргументорв может быть и бесконечное 
количество для того чтобы задать еще один аргумент мы ставим запятую(,)
и записываем еще один аргумент и тд.
Теперь в глубь этой функции первое что нам необходмимо знать это как ведут
себя переменные внутри этой функции Пример
Есть классический вариант, если здесь внутри функции мы создадим переменную
let num мы предпологаем что она будет изменятся которая будет равна 20
let num = 20;
После того как функция вызвана мы попробуем эту переменную достать то есть 
console.log(num);
Если мы обьявляем переменную внутри функции то снаружи она уже недоступна 
Переменные созданые при помощи let и const существуют только внутри блока
функции то есть блока фугурных скобок и здесь это правило работает как 
никогда .Когда такая переменная создана внутри функции она называется 
локальной переменной потому-что она существует только лакально внутри этой
функции .Понятное дело что внутри мы можем с ней как-то взаимодействовать 
выполнять какие-то действия с элементами на странице , с какой-то базой 
данных и тд.Но она существует только внутри функции .Но так же можно 
поступить по другому мы можем создать глобальную переменную вынесев ее за
фигурные скобки пример 

let num = 20; - глобальная переменная 

function showFirstMessage(text) {
    console.log(text);
    let num = 20;  - локальная переменная 
}

showFirstMessage("Hello World");
console.log(num);


Замыкание функции - по простому это сама функция вместе со всеми внешними 
переменными которые ей доступны .

Кроме всех действий функция нам может вернуть какое либо значение при 
помощи ключевого слова 
return- как только функция увидет ключевое слово return она прекратит свое
действие



*/

let num = 20;

function showFirstMessage(text) {
    console.log(text);
    
    console.log(num);
}

showFirstMessage("Hello World");
console.log(num);


function calc(a, b) {
    return (a + b);//скобочки нужны для того чтобы сгрупировать это значение 
//по простому это значит что когда запустится функция calc она вернет сумму
//первого аргумента и второго аргумента и вот эта маленькая функция она 
//уже за нас решает уже многие проблемы потому-что мы ее с вами теперь
// можем переиспользовать много много раз 
//Функции-это один из принципов оптимизации кода 
//После return нельзяне писать код потому что он не будет выполнятся 
//return- также есть еще одно примененение как окончание функции так и 
//возврат значения на ружу 
} 

console.log(calc(4, 3));
console.log(calc(5, 6));
console.log(calc(10, 6));

function ret() {
    let num = 50;
    return num;
}

const anotherNum = ret();
console.log(anotherNum)


/*Классификация функций которая существует */


const logger = function() {
    console.log("Hello")
};

logger()


//Стрелочная функция ее особенности - самое главное это то что такая 
//функция не имеет контекста вызова.Поэтому ее чаще всего можно встретить
//в обработчиках событий.
//Стрелочную функцию везде использовать нельзя

const calc = (a, b) => { 
    console.log('1');
    return a + b;
};

//функция это один из основопологающих кирпичиков из которых состоит 
//любая программа

/*Функции это наши оформленные действия в скриптах. Наример:
Пересчет курса валют пользователь вводит разные значения а у вас будет
функция которая будет каждый раз пересчитывать результат .Вы вводите 
значение и каждый раз пересчитывается справа и слева и выводится новый 
результат.Самое интересное то что Функция каждый раз получает новое 
значение для пересчета Например:
*/ 

function convert (amount) { //эта функция будет получать какое-то значение
    //например какое-то количество валюты которое вы хотите поменять 
    console.log(28 * amount);//внутри мы будем выполнять простые действия 
    //к примеру в консоль мы будем выводить 28 это какой-то образный курс 
    //умножаем на то значение которое приходит к нам в функцию
}

convert(500);//для того чтобы функция сработала нам необходимо вызвать функцию
//мы говорим что мы хотим конвертировать допустим 500 едениц по курсу 28
//которые зафиксированы в функции 

//Аргумент в функции-это какое-то значение которое мы просто называем своим 
//именем .Также мы можем сделать так что курсы валют которые указаны в функции
//будут меняться и не будут знать эти данные нам будут от Банка например 
//Для этого мы можем написать какую-то новую переменную в которую мы и будем
//помещать цифру 28 Пример:

const usdCurr = 28;
const eurCurr = 32;


function convert1(amount, curr) {
    console.log(curr * amount);
}

console.log(500, usdCurr);
console.log(500, eurCurr);

//Так же у ва может быть очень много курсов валют и разных курсов

/*Любая функция может что-то вернуть как результат своей своей работы 
А может и не чего не вернуть все зависит от задачи которая она решает 
Пример:С конвертерем и с применением return
Эта функция занимается тем что вычисляет результат но она его дальше не куда
не передает заметьте что у нас результат в прошлом примере просто выводится
в консоль нужен ли нам в таком коде дальше результат скорее всего нет 
Но если полученное нам значение понадобится дальше то как это будет дальше
выглядеть допустим полученная сумма у нас будет уменьшена из-за скидки.
В коде это будет выглядить следующим образом .Мы запишем еще одну функцию 
Пример:
*/

const discaunt = 0.9;
function promotion(result) {//у нас будет приходить какой-то аргумент который
    //будет называться например result=результат и дальше мы будем 
    //выводить в консоль result какой-то который приходит умножинный на 
    //например назавем его discaunt=скидка
    console.log(result * discaunt);

}

//Как нам полученное значение которое образуется внутри функции передать
//передать в вызов другой функции в место аргумента result ведь мы просто
//вот здесь просто выводимкакой-то результат в консоль  console.log(curr * amount)
//и все.Вот здесь как раз и поможет return 



const usdCurr2 = 28;
const discount2 = 0.9;

function convert2(amount, curr) {
    return curr * amount;//теперь эта функция возврощает какой-то результат
    //то есть у нее есть какой-то результат работы который она куда-то дальше 
    //может передать за счет ключевого слова return и теперь мы можем сделать
    //следующее 
}

function promotion2(result) {
    console.log(result * discount2);
}


//Что здесь происходит у нас как и раньше запускается вот эта функция 
//convert2(500, usdCurr)сначала она нам теперь возврощает какой-то результат
//то есть какое-то число здесь же у нас идет не просто передача функции
//название , ссылки на нее а именно результат потому-что мы ее вызвали 
//вот у нас есть круглые скобки (500, usdCurr) с аргументами эта значит 
//что произошел вызов данной функции и соответственно когда она закончит свою 
//работу здесь мы получим какое-то число это число уже в качестве аргумента 
//пойдет сюда promotion2(result)и дальше уже с ним будет что-то произведено

promotion2(convert2(500, usdCurr2));

//первая функция возврощает результат 
//вторая функция уже с результатом что-то делает то есть выводит в консоль
//Поэтому когда вы пишите функцию вы должны предстовлять что она в итоге 
//будет делать и как использоваться, конечно можно добавить вывод в консоль
//в первую функцию здесь может быть множество выводов в консоль и тд.
//Желательно чтобы функция выполляла какое-то действие то есть не смешивать
//в кучу все подряд 
//Ключевое слово return когда функция его видит она заканчивает свою работу
//То есть если после return написать код он не будет работать
//После ключевого слова return может быть возващенно любое значение просто
//число , обьект , массив или другая функция и тд 


//return можно использовать и вообще без значения Пример:

function test() {
    for (let i = 0; i < 5; i++) {
        console.log(i);
        if (i === 3 ) return
    }
    console.log('Done');
}

test();

/*return возврощает undefined как бы возврощается какое-то наеоределенное
не заданое значение.Здесь есть определенный нюанс на самом деле любая
функция всегда что-то возврощает даже если вы не испоьзуете return 
но на уровне кода самого движка JS функция все равно закончится 
return undefined .Для проверки этого есть определенный тест Пример:
*/

function doNothing() {};//создаем функцию которая не чего не делает 
//просто пустая функция дальше мы в консоль выведем 
//дальше мы его будем сравнивать с undefined то есть если функция нам что-то
//возврощает то сравненно с undefined ответ в консоли true это простое 
//доказательство того что функция нам все равно нам что-то возврощает даже
//если мы там четко не указываем какой-то return 

//Практического смысла в этом конечно не много но знать об этом надо 
//Но на собеседовании могут спросить пример 
//console.log('11');// 11  // undefined в браузере запуск почему есть
//ответ undefined - потому-что console.log()-это функция сотыщду-этообьект
//большой .log-это его метод то есть функция которая записана внутри обьекта
//мы здесь его используем этот метод он выводит в консоль какое-то
//значение и так как эта функция она должна что-то возврощать поэтому и
//и эта функции у нас возврощает undefined который мы видим в консоли 
//и так будет с любой функцией которая не содержит return

//И после return не ставьте перенос строки а то будет ошибка 

console.log(doNothing() === undefined);